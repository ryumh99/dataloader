'''
README
---
    Use following datasets,
    1. mini-ImageNet (https://www.kaggle.com/datasets/zcyzhchyu/mini-imagenet/data)
        - This dataset consists of 100 classes, each class has 600 images.
        - Download method:
            $ pip install kaggle
            $ kaggle datasets download -d zcyzhchyu/mini-imagenet
    2. Flowers102 (Do not need to download over the internet)
        - This dataset consists of 102 classes, each class has 40-258 images.
        - Download method:
            >>> from torchvision import datasets
            >>> datasets.Flowers102(root="flowers102", split="train", download=True) # Use download=True only once.
'''
import time
import numpy as np
import os
import warnings
from PIL import Image

import torch
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms, datasets

warnings.filterwarnings("ignore")


class MiniImageNetDataset(Dataset):
    def __init__(self, root_dir, split='train', transform=None):
        """
        Args:
            root_dir (string): Root directory of the dataset.
            split (string): 'train', 'val', or 'test' split.
            transform (callable, optional): Optional transform to be applied on a sample.
        """
        self.root_dir = root_dir
        self.split = split
        self.transform = transform

        self.image_paths = []
        self.labels = []

        split_path = os.path.join(root_dir, f'{split}.csv')
        with open(split_path, 'r') as f:
            next(f)
            for line in f:
                img_name, label = line.strip().split(',')
                self.image_paths.append(os.path.join(root_dir, 'images', img_name))
                self.labels.append(label)
        self.label2idx = {label: idx for idx, label in enumerate(sorted(set(self.labels)))}

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        image = Image.open(self.image_paths[idx]).convert('RGB')
        label = self.labels[idx]
        label = self.label2idx[label]

        if self.transform:
            image = self.transform(image)

        return image, label


def your_algorithm():
    '''
        TODO: Implement your algorithm here.
    '''
    return 


if __name__ == "__main__":
    batch_size = 32
    dataset = MiniImageNetDataset(
        root_dir='mini-imagenet',
        split='train',
        transform=transforms.Compose([
            transforms.ToTensor(),
            transforms.Resize((256, 256)),
            transforms.RandomCrop((224, 224)),
            transforms.Normalize(
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]
            ),
        ])
    )
    # If you want to use Flowers102 dataset, use following code.
    # dataset = datasets.Flowers102(
    #     root="flowers102",
    #     split="train",
    #     download=True,
    #     transform=transforms.Compose([
    #         transforms.ToTensor(),
    #         transforms.Resize((256, 256)),
    #         transforms.RandomCrop((224, 224)),
    #         transforms.Normalize(
    #             mean=[0.485, 0.456, 0.406],
    #             std=[0.229, 0.224, 0.225]
    #         ),
    #     ])
    # )
    params = your_algorithm()
    if params is None:
        # Default parameters
        dataloader = DataLoader(
            dataset=dataset,
            batch_size=batch_size,
            num_workers=int( os.cpu_count() / 2 ),
            prefetch_factor=2,
            pin_memory=False,
            persistent_workers=False,
        )
    else:
        dataloader = DataLoader(dataset=dataset, **params)

    dev = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")

    runtime_list = []
    stime = time.perf_counter_ns() # ns
    for i, t in dataloader:
        i, t = i.to(dev), t.to(dev)
        torch.cuda.synchronize()
        etime = time.perf_counter_ns()
        runtime_list.append((etime - stime) * 1e-6) # ms
    avg_runtime = np.mean(runtime_list)
    std_runtime = np.std(runtime_list)

    print(f"Average Runtime: {avg_runtime:.4f} ms")
    print(f"Standard Deviation: {std_runtime:.4f}")

